#!/bin/bash

function die () {
  echo >2 "${1}"
  exit 1
}

function restart_etherpad () {
  service <%=@app[:service_name]%> restart > /dev/null
  start=$(date +%s)
  while [ $(expr $(date +%s) - ${start}) -lt 10 ] ; do
    if [[ $(service <%=@app[:service_name]%> status) =~ "is running" ]] ; then
      sleep 2s
      return
    fi
    sleep 0.25
  done
  die "Timeout restarting <%=@app[:service_name]%>"
  exit 1
}

ACCOUNT="${1}"
if [ -z "${ACCOUNT}" ] ; then
  die "No account name provided"
fi
PASSWORD="${2}"
if [ -z "${PASSWORD}" ] ; then
  die "No password provided"
fi

ADMIN="${3}"
shopt -s nocasematch
[[ ! -z "${ADMIN}" && "${ADMIN}" == "true" ]] && ADMIN="true" || ADMIN="false"
shopt -u nocasematch

$(dirname $0)/user_exists.sh "${ACCOUNT}" "${PASSWORD}" 2>&1 > /dev/null
if [ $? -eq 0 ] ; then
  # Account already exists
  echo "true"
  exit 0
fi

SETTINGS_JSON="<%=@app[:run_as_home]%>/<%=@app[:name]%>/settings.json"
BACKUP=$(mktemp $(dirname ${SETTINGS_JSON})/settings.json.$(date +%Y%m%d_%H%M%S).XXXXXXX)
TEMP=$(mktemp $(dirname ${SETTINGS_JSON})/.settings.json.XXXXXXX)

# Backup settings
cp ${SETTINGS_JSON} ${BACKUP} || die "Error backing up ${SETTINGS_JSON}"

# Remove any existing entry, write to temp file
cat ${SETTINGS_JSON} | cos json --operation delete --path users.${ACCOUNT} > ${TEMP} || die "Error removing existing entry"

# Create the new entry in temp file
cat ${TEMP} | cos json --operation write  --path users.${ACCOUNT} --outfile ${TEMP} \
  --value "{\"password\": \"${PASSWORD}\", \"is_admin\": ${ADMIN} }" || die "Error editing ${SETTINGS_JSON}"

# Everything worked, write temp file to settings.json
cat ${TEMP} > ${SETTINGS_JSON} || die "Error writing to ${SETTINGS_JSON}"
rm -f ${TEMP}

restart_etherpad
echo "true"
exit 0
